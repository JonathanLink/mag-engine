{"version":3,"sources":["collections/Table.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,gBAA2C,MAAM,2BAA2B,CAAC;AAkBpF;IAAmC,yBAAgC;IAAnE;;IAyDA,CAAC;IAtDW,+BAAe,GAAvB;QACI,IAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrC,QAAQ,CAAC;YACb,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,gCAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAM,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC;YACP,gCAAK,OAAO,CAAM,CACV,CAAC;IACb,CAAC;IAEO,+BAAe,GAAvB;QACI,IAAM,IAAI,GAAG,EAAE,CAAC;QAChB,GAAG,CAAC,CAAC,IAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrC,QAAQ,CAAC;YACb,CAAC;YAED,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAM,OAAO,GAAG,EAAE,CAAC;YACnB,GAAG,CAAC,CAAC,IAAI,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC/C,QAAQ,CAAC;gBACb,CAAC;gBAED,IAAM,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC;gBACnE,IAAM,SAAS,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC;gBAC3D,IAAM,SAAS,GAAW,GAAG,CAAC,SAAS,CAAC,CAAC;gBAEzC,EAAE,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAC,gCAAK,oBAAoB,CAAC,SAAS,EAAE,CAAC,CAAC,CAAM,CAAC,CAAC;gBAChE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,OAAO,CAAC,IAAI,CAAC,gCAAK,SAAS,CAAM,CAAC,CAAC;gBACvC,CAAC;YAEL,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,gCAAK,OAAO,CAAM,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,mCAAQ,IAAI,CAAS,CAAC;IACjC,CAAC;IAEM,sBAAM,GAAb;QACI,MAAM,CAAC,+BAAO,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;YACjE,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,eAAe,EAAE,CACjB,CAAC;IACb,CAAC;IAvDa,iBAAW,GAAG,OAAO,CAAC;IAwDxC,YAAC;CAzDD,AAyDC,CAzDkC,gBAAgB,GAyDlD;eAzDoB,KAAK","file":"Table.js","sourcesContent":["import * as React from \"react\";\n\nimport NamespaceWrapper, { NamespaceWrapperProps } from \"../utils/NamespaceWrapper\";\n\nexport interface Column {\n    label: string;\n\n    renderer?: (cellValue: String, rowIndex: String) => any;\n\n    key: string;\n}\n\nexport interface TableProps extends NamespaceWrapperProps {\n    cols: { [key: string]: Column };\n\n    data: { [key: string]: any}[];\n\n    className ?: string;\n}\n\nexport default class Table extends NamespaceWrapper<TableProps, {}> {\n    public static displayName = \"Table\";\n\n    private renderTableHead() {\n        const columns = [];\n\n        for (let j in this.props.cols) {\n            if (!this.props.cols.hasOwnProperty(j)) {\n                continue;\n            }\n\n            columns.push(<th>{this.props.cols[j].label}</th>);\n        }\n\n        return <thead>\n        <tr>{columns}</tr>\n        </thead>;\n    }\n\n    private renderTableBody() {\n        const rows = [];\n        for (const i in this.props.data) {\n            if (!this.props.data.hasOwnProperty(i)) {\n                continue;\n            }\n\n            const row = this.props.data[i];\n            const columns = [];\n            for (let columnIndex in this.props.cols) {\n                if (!this.props.cols.hasOwnProperty(columnIndex)) {\n                    continue;\n                }\n\n                const columnRenderFunction = this.props.cols[columnIndex].renderer;\n                const columnKey: string = this.props.cols[columnIndex].key;\n                const cellValue: string = row[columnKey];\n\n                if (columnRenderFunction != null) {\n                    columns.push(<td>{columnRenderFunction(cellValue, i)}</td>);\n                } else {\n                    columns.push(<td>{cellValue}</td>);\n                }\n\n            }\n\n            rows.push(<tr>{columns}</tr>);\n        }\n\n        return <tbody>{rows}</tbody>;\n    }\n\n    public render() {\n        return <table className={this.classes(\"Table\", this.props.className)}>\n          {this.renderTableHead()}\n          {this.renderTableBody()}\n        </table>;\n    }\n}\n"]}