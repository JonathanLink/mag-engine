{"version":3,"sources":["elements/RadialProgress.tsx"],"names":[],"mappings":"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","file":"RadialProgress.js","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport * as ReactDOM from \"react-dom\";\n\nexport interface RadialProgressProps {\n    /**\n     * Width and height\n     */\n    size: number;\n\n    backgroundColor ?: string;\n\n    barColor: string;\n\n    thickness ?: number;\n\n    percent: number;\n\n    withText ?: boolean;\n\n    textColor ?: string;\n}\n\n/**\n * @todo Convert to SVG once IE8 is officially out\n */\nexport default class RadialProgress extends React.Component<RadialProgressProps, {}> {\n    public static displayName = \"RadialProgress\";\n\n    public static propTypes = {//\n        size: PropTypes.number.isRequired, //\n        backgroundColor: PropTypes.string, //\n        barColor: PropTypes.string.isRequired, //\n        thickness: PropTypes.number, //\n        percent: PropTypes.number.isRequired, //\n        withText: PropTypes.bool, //\n        textColor: PropTypes.string\n    };\n\n    public static defaultProps: RadialProgressProps = {\n        size: 0,\n        barColor: \"\",\n        percent: 0,\n\n        thickness: 10,\n        withText: false,\n        backgroundColor: \"#ccc\"\n    };\n\n    public componentDidMount() {\n        this.update();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<RadialProgressProps>, prevState: Readonly<{}>, prevContext: any) {\n        this.update();\n    }\n\n    public update() {\n        const radius: number = (this.props.size / 2 | 0);\n        const canvas: HTMLCanvasElement = ReactDOM.findDOMNode(this.refs[\"canvas\"]) as HTMLCanvasElement;\n        const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.renderBackground(context, radius);\n        this.renderBar(context, radius);\n        if (this.props.withText) {\n            this.renderText(context, radius);\n        }\n    }\n\n    public renderBackground(context: CanvasRenderingContext2D, radius: number) {\n        context.fillStyle = this.props.backgroundColor;\n        context.beginPath();\n        context.arc(radius, radius, radius, 0, Math.PI * 2, false);\n        context.arc(radius, radius, radius - this.props.thickness, Math.PI * 2, 0, true);\n        context.fill();\n    }\n\n    public renderBar(context: CanvasRenderingContext2D, radius: number) {\n        context.fillStyle = this.props.barColor;\n        const startAngle: number = Math.PI * 1.5;\n        const degrees: number = this.props.percent * 3.6;\n        const radians: number = degrees * (Math.PI / 180);\n        context.beginPath();\n        context.arc(radius, radius, radius, startAngle, startAngle + radians, false);\n        context.arc(radius, radius, radius - this.props.thickness, startAngle + radians, startAngle, true);\n        context.fill();\n    }\n\n    public renderText(context: CanvasRenderingContext2D, radius: number) {\n        context.fillStyle = this.props.textColor == null ? this.props.barColor : this.props.textColor;\n        context.textAlign = \"center\";\n        context.textBaseline = \"middle\";\n        context.font = \"bold \" + ((radius / 2 | 0)) + \"px Arial\";\n        context.fillText(Math.round(this.props.percent) + \"%\", radius, radius, 200);\n    }\n\n    public render() {\n        return <canvas width={this.props.size} height={this.props.size} ref=\"canvas\" />;\n    }\n}\n"]}