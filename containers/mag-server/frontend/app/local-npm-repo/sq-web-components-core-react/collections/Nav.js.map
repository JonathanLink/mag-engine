{"version":3,"sources":["collections/Nav.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AAExC,OAAO,gBAA2C,MAAM,2BAA2B,CAAC;AAmCpF;IAAiC,uBAA0B;IAA3D;;IAwBA,CAAC;IAdC,oBAAM,GAAN;QACE,IAAM,eAA0F,EAAzF,wBAAS,EAAE,cAAI,EAAE,0BAAU,EAAE,wBAAS,EAAE,cAAI,EAAE,sBAAQ,EAAE,wBAAS,EAAE,qGAAsB,CAAC;QACjG,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAC1B,KAAK,EACL,IAAI,IAAI,OAAO,GAAG,IAAI,EACtB,UAAU,IAAI,iBAAiB,EAC/B,SAAS,IAAI,gBAAgB,EAC7B,IAAI,IAAI,WAAW,EACnB,QAAQ,IAAI,aAAa,EACzB,SAAS,CACV,CAAC;QAEF,MAAM,CAAC,sCAAK,SAAS,EAAE,OAAO,IAAM,KAAK,EAAI,CAAC;IAChD,CAAC;IArBM,aAAS,GAAG;QACjB,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC3C,YAAY,EAAE,SAAS,CAAC,IAAI;QAC5B,WAAW,EAAE,SAAS,CAAC,IAAI;QAC3B,MAAM,EAAE,SAAS,CAAC,IAAI;QACtB,UAAU,EAAE,SAAS,CAAC,IAAI;KAC3B,CAAC;IAgBJ,UAAC;CAxBD,AAwBC,CAxBgC,gBAAgB,GAwBhD;eAxBoB,GAAG;AA0BxB;IAA6B,2BAA8B;IAA3D;;IAUA,CAAC;IATC,wBAAM,GAAN;QACE,IAAM,eAAoF,EAAnF,wBAAS,EAAE,cAAI,EAAE,wBAAS,EAAE,gCAAa,EAAE,sBAAQ,EAAE,kBAAM,EAAE,6FAAsB,CAAC;QAE3F,8EAA8E;QAC9E,MAAM,CAAC,6BAAK,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,IACxD,IAAI,CAAC,CAAC;YACL,oCAAG,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,IAAI,WAAW,EAAE,QAAQ,IAAI,aAAa,EAAE,aAAa,CAAC,IAAM,KAAK,EAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAClJ,CAAC;IACT,CAAC;IACH,cAAC;AAAD,CAVA,AAUC,CAV4B,gBAAgB,GAU5C","file":"Nav.js","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nimport NamespaceWrapper, { NamespaceWrapperProps } from \"../utils/NamespaceWrapper\";\n\nexport interface NavProps extends React.HTMLAttributes<HTMLDivElement>, NamespaceWrapperProps {\n  /**\n   * Size of the nav\n   */\n  size?: \"small\" | \"large\";\n\n  horizontal?: boolean;\n\n  hoverable?: boolean;\n\n  loud?: boolean;\n\n  disabled?: boolean;\n}\n\nexport interface NavItemProps extends NamespaceWrapperProps {\n  /**\n   * Classes to bind, prefer modifiers\n   */\n  className?: string;\n\n  linkClassName?: string;\n\n  disabled?: boolean;\n  href?: string;\n  active?: boolean;\n\n  /**\n   * Any component, or the name of the link if \"href\" is specified\n   */\n  children?: any;\n}\n\nexport default class Nav extends NamespaceWrapper<NavProps> {\n\n  static propTypes = {//\n    \"size\": PropTypes.oneOf([\"small\", \"large\"]), //\n    \"horizontal\": PropTypes.bool, //\n    \"hoverable\": PropTypes.bool, //\n    \"loud\": PropTypes.bool, //\n    \"disabled\": PropTypes.bool, //\n  };\n\n  render() {\n    const {namespace, size, horizontal, hoverable, loud, disabled, className, ...props} = this.props;\n    const classes = this.classes(\n      \"Nav\",\n      size && \"Nav--\" + size,\n      horizontal && \"Nav--horizontal\",\n      hoverable && \"Nav--hoverable\",\n      loud && \"Nav--loud\",\n      disabled && \"is-disabled\",\n      className\n    );\n\n    return <div className={classes} {...props} />;\n  }\n}\n\nexport class NavItem extends NamespaceWrapper<NavItemProps> {\n  render() {\n    const {namespace, href, className, linkClassName, disabled, active, ...props} = this.props;\n\n    // TODO :: find a way to disable links, that isn't the disabled prop on anchor\n    return <div className={this.classes(\"Nav__item\", className)}>\n      {href ?\n        <a href={href} className={this.classes(\"Nav__link\", active && \"is-active\", disabled && \"is-disabled\", linkClassName)} {...props} /> : props.children}\n    </div>;\n  }\n}\n"]}