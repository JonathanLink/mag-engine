{"version":3,"sources":["forms/Input.tsx"],"names":[],"mappings":"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","file":"Input.js","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nimport NamespaceWrapper, { NamespaceWrapperProps } from \"../utils/NamespaceWrapper\";\n\nexport interface InputProps extends NamespaceWrapperProps /*, React.InputHTMLAttributes<HTMLInputElement>*/ {\n    /**\n     * set the value of the field.\n     */\n    value ?: string;\n\n    /**\n     * set the default value. (will only be set at component mount)\n     */\n    defaultValue ?: string;\n\n    /**\n     * set a placeholder on the field\n     */\n    placeholder ?: string;\n\n    /**\n     * set an ID on the field\n     */\n    id ?: string;\n\n    /**\n     * The field's type\n     */\n    type ?: string;\n\n    /**\n     * The field's name\n     */\n    name ?: string;\n\n    /**\n     * The field's maxLength\n     */\n    maxLength ?: number;\n\n    /**\n     * Triggered when a value is changed\n     */\n    onChange ?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\n    onFocus ?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\n    onBlur ?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\n    onKeyDown ?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\n    /**\n     * Disable the input\n     */\n    disabled ?: boolean;\n\n    /**\n     * Set the input as readOnly\n     */\n    readOnly ?: boolean;\n\n    /**\n     * Add a class to the container, prefer modifiers\n     */\n    className ?: string;\n\n    /**\n     * set the size\n     */\n    size ?: \"small\"| \"large\";\n}\n\nexport interface InputState {\n    /**\n     * determines whether placeholder must be shown or not\n     */\n    placeholderActive ?: boolean;\n}\n\nconst ESC_KEY_CODE = 27;\n\nexport default class Input extends NamespaceWrapper<InputProps, InputState> {\n    public static displayName = \"Input\";\n\n    public static propTypes = {//\n        \"id\": PropTypes.string, //\n        \"value\": PropTypes.string, //\n        \"defaultValue\": PropTypes.string, //\n        \"placeholder\": PropTypes.string, //\n        \"type\": PropTypes.string, //\n        \"name\": PropTypes.string, //\n        \"maxLength\": PropTypes.number, //\n\n        \"disabled\": PropTypes.bool, //\n        \"readOnly\": PropTypes.bool, //\n\n        \"onChange\": PropTypes.func, //\n        \"onFocus\": PropTypes.func, //\n        \"onBlur\": PropTypes.func, //\n        \"onKeyDown\": PropTypes.func, //\n\n        \"className\": PropTypes.string, //\n        \"size\": PropTypes.oneOf([\"small\", \"large\"]) //\n    };\n\n    private wrappedInput: HTMLInputElement;\n    private placeholderSupport: boolean;\n    private needsManualPlaceholding: boolean;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            placeholderActive: false\n        };\n\n        this.placeholderSupport = (\"placeholder\" in document.createElement(\"input\"));\n        this.needsManualPlaceholding = this.props.placeholder && !this.placeholderSupport;\n    }\n\n    render() {\n        const {className, size, ...props} = this.props;\n        const classes = this.classes(\"Input\", (size && \"Input--\" + size), className);\n\n        if (props.readOnly || props.disabled) {\n            props[\"tabIndex\"] = -1;\n        }\n\n        if (props.disabled) {\n            props[\"aria-disabled\"] = \"true\";\n        }\n\n        return (<div className=\"u-posRelative\">\n            {this.renderPlaceholder()}\n            <input className={classes}\n                   {...props}\n                   onFocus={this.handleFocus}\n                   onBlur={this.handleBlur}\n                   onKeyDown={this.handleKeyDown}\n                   ref={(input) => { this.wrappedInput = input; }}\n            />\n        </div>);\n    }\n\n    componentWillReceiveProps(nextProps: InputProps) {\n        this.needsManualPlaceholding = !this.placeholderSupport && !!nextProps.placeholder;\n    }\n\n    componentDidMount() {\n        if (this.needsManualPlaceholding) {\n            setTimeout(() => this.setPlaceholderActive(this.wrappedInput && !this.wrappedInput.value), 0);\n        }\n    }\n\n    private renderPlaceholder() {\n        if (this.needsManualPlaceholding && this.state.placeholderActive) {\n            return <div className={this.classes(\"Input__placeholder\")} onClick={this.handlePlaceholderClick}>{this.props.placeholder}</div>;\n        }\n        return null;\n    }\n\n    private handlePlaceholderClick = () => {\n        this.wrappedInput.focus();\n    }\n\n    private handleFocus = (event) => {\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n        this.setPlaceholderActive(false);\n    }\n\n    private handleBlur = (event) =>  {\n        this.setPlaceholderActive(!this.wrappedInput.value);\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    private setPlaceholderActive(active: boolean) {\n        if (this.needsManualPlaceholding) {\n            this.setState({\n                placeholderActive: active\n            });\n        }\n    }\n\n    // prevent IE from wiping data out from input and form\n    private handleKeyDown = (event) =>  {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n\n        if (event.keyCode === ESC_KEY_CODE) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n"]}