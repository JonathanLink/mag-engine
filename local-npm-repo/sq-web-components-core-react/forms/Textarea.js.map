{"version":3,"sources":["forms/Textarea.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AAExC,OAAO,gBAA2C,MAAM,2BAA2B,CAAC;AA+DpF;IAAsC,4BAAmC;IAAzE;;IA2CA,CAAC;IArBU,yBAAM,GAAb;QACI,IAAM,eAAwC,EAAvC,wBAAS,EAAE,cAAI,EAAE,yCAAsB,CAAC;QAE/C,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjB,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;YACvB,KAAK,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC;QACpC,CAAC;QAED,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAC1B,UAAU,EACV,CAAC,IAAI,IAAI,YAAY,GAAG,IAAI,CAAC,EAC7B,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,oBAAoB,EAC3C,SAAS,CACV,CAAC;QAEF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,6BAAK,SAAS,EAAE,OAAO,IAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,YAAY,CAAO,CAAC;QAC9E,CAAC;QAED,MAAM,CAAC,2CAAU,SAAS,EAAE,OAAO,IAAM,KAAK,EAAI,CAAC;IACvD,CAAC;IAzCa,oBAAW,GAAG,UAAU,CAAC;IAEzB,kBAAS,GAAG;QACtB,IAAI,EAAE,SAAS,CAAC,MAAM;QACtB,OAAO,EAAE,SAAS,CAAC,MAAM;QACzB,cAAc,EAAE,SAAS,CAAC,MAAM;QAChC,aAAa,EAAE,SAAS,CAAC,MAAM;QAC/B,MAAM,EAAE,SAAS,CAAC,MAAM;QACxB,WAAW,EAAE,SAAS,CAAC,MAAM;QAE7B,UAAU,EAAE,SAAS,CAAC,IAAI;QAC1B,UAAU,EAAE,SAAS,CAAC,IAAI;QAE1B,UAAU,EAAE,SAAS,CAAC,IAAI;QAC1B,QAAQ,EAAE,SAAS,CAAC,IAAI;QACxB,SAAS,EAAE,SAAS,CAAC,IAAI;QAEzB,WAAW,EAAE,SAAS,CAAC,MAAM;QAC7B,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE;KACjD,CAAC;IAuBN,eAAC;CA3CD,AA2CC,CA3CqC,gBAAgB,GA2CrD;eA3CoB,QAAQ","file":"Textarea.js","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nimport NamespaceWrapper, { NamespaceWrapperProps } from \"../utils/NamespaceWrapper\";\n\nexport interface TextareaProps extends NamespaceWrapperProps {\n    /**\n     * set the value of the field.\n     */\n    value ?: string;\n\n    /**\n     * set the default value. (will only be set at component mount)\n     */\n    defaultValue ?: string;\n\n    /**\n     * set a placeholder on the field\n     */\n    placeholder ?: string;\n\n    /**\n     * set an ID on the field\n     */\n    id ?: string;\n\n    /**\n     * The field's name\n     */\n    name ?: string;\n\n    /**\n     * The field's maxLength\n     */\n    maxLength ?: number;\n\n    /**\n     * Triggered when a value is changed\n     */\n    onChange ?: (event: React.SyntheticEvent<HTMLTextAreaElement>) => void;\n\n    onBlur ?: (event: React.SyntheticEvent<HTMLTextAreaElement>) => void;\n\n    onFocus ?: (event: React.SyntheticEvent<HTMLTextAreaElement>) => void;\n\n    /**\n     * Disable the input\n     */\n    disabled ?: boolean;\n\n    /**\n     * Set the input as readOnly\n     */\n    readOnly ?: boolean;\n\n    /**\n     * Add a class to the container, prefer modifiers\n     */\n    className ?: string;\n\n    /**\n     * The field's size\n     */\n    size ?: \"small\"| \"large\";\n}\n\nexport default class Textarea extends NamespaceWrapper<TextareaProps, {}> {\n    public static displayName = \"Textarea\";\n\n    public static propTypes = {//\n        \"id\": PropTypes.string, //\n        \"value\": PropTypes.string, //\n        \"defaultValue\": PropTypes.string, //\n        \"placeholder\": PropTypes.string, //\n        \"name\": PropTypes.string, //\n        \"maxLength\": PropTypes.number, //\n\n        \"disabled\": PropTypes.bool, //\n        \"readOnly\": PropTypes.bool, //\n\n        \"onChange\": PropTypes.func, //\n        \"onBlur\": PropTypes.func, //\n        \"onFocus\": PropTypes.func, //\n\n        \"className\": PropTypes.string, //\n        \"size\": PropTypes.oneOf([\"small\", \"large\"]) //\n    };\n\n    public render() {\n        const {className, size, ...props} = this.props;\n\n        if (props.disabled) {\n            props[\"tabIndex\"] = -1;\n            props[\"aria-disabled\"] = \"true\";\n        }\n\n        const classes = this.classes(\n          \"Textarea\",\n          (size && \"Textarea--\" + size),\n          this.props.readOnly && \"Textarea--readonly\",\n          className\n        );\n\n        if (this.props.readOnly) {\n            return <div className={classes}>{props.value || props.defaultValue}</div>;\n        }\n\n        return <textarea className={classes} {...props} />;\n    }\n}\n"]}