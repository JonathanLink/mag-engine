{"version":3,"sources":["forms/Checkbox.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AAExC,OAAO,gBAA2C,MAAM,2BAA2B,CAAC;AAuCpF;IAAsC,4BAAmC;IAGrE,kBAAY,KAAoB;QAAhC,YACI,kBAAM,KAAK,CAAC,SAGf;QADG,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACrD,CAAC;IAYM,yBAAM,GAAb;QACI,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAC1B,UAAU,EACV,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,kBAAkB,EACzC,IAAI,CAAC,KAAK,CAAC,SAAS,CACrB,CAAC;QAEF,MAAM,CAAC,+BAAO,SAAS,EAAE,OAAO;YAC3B,IAAI,CAAC,WAAW,EAAE;YACnB,8BAAM,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAC3C,IAAI,CAAC,KAAK,CAAC,QAAQ,CACjB,CACH,CAAC;IACb,CAAC;IAEM,8BAAW,GAAlB;QACI,IAAM,OAAO,GAAgD,EAAE,CAAC;QAChE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAC7B,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QACzC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;QACvD,CAAC;QACD,MAAM,CAAC,wCAAO,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,UAAU,EAAC,KAAK,EAAC,GAAG,EAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAM,OAAO,EAAI,CAAC;IAC1H,CAAC;IAEO,+BAAY,GAApB,UAAqB,KAA0C;QAC3D,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC;IACL,CAAC;IAnDa,oBAAW,GAAG,UAAU,CAAC;IAQzB,kBAAS,GAAG;QACtB,MAAM,EAAE,SAAS,CAAC,MAAM;QACxB,gBAAgB,EAAE,SAAS,CAAC,IAAI;QAChC,SAAS,EAAE,SAAS,CAAC,IAAI;QACzB,UAAU,EAAE,SAAS,CAAC,IAAI;QAC1B,UAAU,EAAE,SAAS,CAAC,IAAI;QAC1B,WAAW,EAAE,SAAS,CAAC,MAAM;QAC7B,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE;KAChC,CAAC;IAoCN,eAAC;CArDD,AAqDC,CArDqC,gBAAgB,GAqDrD;eArDoB,QAAQ","file":"Checkbox.js","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nimport NamespaceWrapper, { NamespaceWrapperProps } from \"../utils/NamespaceWrapper\";\n\nexport interface CheckboxProps extends NamespaceWrapperProps {\n    /**\n     * Name of the field\n     */\n    name ?: string;\n\n    /**\n     * Is it checked by default ?\n     */\n    defaultChecked ?: boolean;\n\n    /**\n     * Is it currently checked\n     */\n    checked ?: boolean;\n\n    /**\n     * Triggered on any change\n     */\n    onChange ?: (checked: boolean, event: React.SyntheticEvent<HTMLInputElement>) => void;\n\n    /**\n     * Disables the switch\n     */\n    disabled ?: boolean;\n\n    /**\n     * Add a class name\n     */\n    className ?: string;\n\n    /**\n     * TODO :: rename to switch\n     */\n    isSwitch ?: boolean;\n}\n\nexport default class Checkbox extends NamespaceWrapper<CheckboxProps, {}> {\n    public static displayName = \"Checkbox\";\n\n    constructor(props: CheckboxProps) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    public static propTypes = {//\n        \"name\": PropTypes.string, //\n        \"defaultChecked\": PropTypes.bool, //\n        \"checked\": PropTypes.bool, //\n        \"onChange\": PropTypes.func, //\n        \"disabled\": PropTypes.bool, //\n        \"className\": PropTypes.string, //\n        \"isSwitch\": PropTypes.bool //\n    };\n\n    public render() {\n        const classes = this.classes(\n          \"Checkbox\",\n          this.props.isSwitch && \"Checkbox--switch\",\n          this.props.className\n        );\n\n        return <label className={classes}>\n            {this.renderInput()}\n            <span className={this.classes(\"Checkbox__label\")}>\n                {this.props.children}\n            </span>\n        </label>;\n    }\n\n    public renderInput() {\n        const options: React.InputHTMLAttributes<HTMLInputElement> = {};\n        if (this.props.name != null) {\n            options.name = this.props.name;\n        }\n        if (this.props.checked != null) {\n            options.checked = this.props.checked;\n        }\n        if (this.props.defaultChecked != null) {\n            options.defaultChecked = this.props.defaultChecked;\n        }\n        return <input onChange={this.handleChange} type=\"checkbox\" value=\"1\" disabled={!!this.props.disabled} {...options} />;\n    }\n\n    private handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        if (this.props.onChange != null) {\n            this.props.onChange(event.target.checked, event);\n        }\n    }\n}\n"]}