{"version":3,"sources":["forms/Button.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AAExC,OAAO,gBAA2C,MAAM,2BAA2B,CAAC;AAoCpF;IAAoC,0BAAiC;IAArE;;IAkDA,CAAC;IA1BU,uBAAM,GAAb;QACI,IAAM,eAAkF,EAAjF,oBAAO,EAAE,gBAAK,EAAE,cAAI,EAAE,oBAAO,EAAE,gBAAK,EAAE,kBAAM,EAAE,8EAAmC,CAAC;QAEzF,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9B,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QACtB,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,KAAK,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC;QAClC,CAAC;QAED,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAC5B,QAAQ,EACR,OAAO,IAAI,UAAU,GAAG,OAAO,EAC/B,IAAI,IAAI,UAAU,GAAG,IAAI,EACzB,KAAK,IAAI,UAAU,GAAG,KAAK,EAC3B,KAAK,IAAI,eAAe,EACxB,MAAM,IAAI,WAAW,EACrB,OAAO,IAAI,YAAY,EACvB,KAAK,CAAC,QAAQ,IAAI,aAAa,EAC/B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAExB,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;YACjB,CAAC,CAAC,oCAAG,IAAI,EAAC,QAAQ,IAAK,KAAgD,EAAI;YAC3E,CAAC,CAAC,2CAAY,KAAgD,EAAI,CAAC;IACzE,CAAC;IAhDa,kBAAW,GAAG,QAAQ,CAAC;IAEvB,gBAAS,GAAG;QACtB,MAAM,EAAE,SAAS,CAAC,MAAM;QACxB,MAAM,EAAE,SAAS,CAAC,MAAM;QAExB,YAAY;QACZ,WAAW,EAAE,SAAS,CAAC,MAAM;QAC7B,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACrD,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAC3E,OAAO,EAAE,SAAS,CAAC,IAAI;QAEvB,SAAS;QACT,UAAU,EAAE,SAAS,CAAC,IAAI;QAC1B,QAAQ,EAAE,SAAS,CAAC,IAAI;QACxB,SAAS,EAAE,SAAS,CAAC,IAAI;QAEzB,WAAW;QACX,SAAS,EAAE,SAAS,CAAC,IAAI;QACzB,QAAQ,EAAE,SAAS,CAAC,IAAI;KAC3B,CAAC;IA4BN,aAAC;CAlDD,AAkDC,CAlDmC,gBAAgB,GAkDnD;eAlDoB,MAAM","file":"Button.js","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nimport NamespaceWrapper, { NamespaceWrapperProps } from \"../utils/NamespaceWrapper\";\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLElement>, React.AnchorHTMLAttributes<HTMLElement>, NamespaceWrapperProps {\n    /**\n     * Set the size of the button\n     */\n    size?: \"xsmall\" | \"small\"| \"large\";\n\n    /**\n     * Set the color of the button\n     */\n    level?: \"info\" | \"warning\" | \"error\" | \"success\";\n\n    /**\n     * Set the variant of the button\n     */\n    variant?: \"primary\" | \"secondary\" | \"cta\" | \"text\" | \"flat\";\n\n    /**\n     * Disable the button\n     */\n    disabled?: boolean;\n\n    /**\n     * Active / Focused state\n     */\n    active?: boolean;\n\n    /**\n     * Is loading\n     */\n    loading?: boolean;\n\n    block?: boolean;\n}\n\nexport default class Button extends NamespaceWrapper<ButtonProps, {}> {\n    public static displayName = \"Button\";\n\n    public static propTypes = {//\n        \"type\": PropTypes.string, //\n        \"href\": PropTypes.string, //\n\n        // Modifiers\n        \"className\": PropTypes.string, //\n        \"level\": PropTypes.oneOf([\"info\", \"warning\", \"error\", \"success\"]), //\n        \"size\": PropTypes.oneOf([\"xsmall\", \"small\", \"large\"]), //\n        \"variant\": PropTypes.oneOf([\"primary\", \"secondary\", \"cta\", \"text\", \"flat\"]), //\n        \"block\": PropTypes.bool, //\n\n        // States\n        \"disabled\": PropTypes.bool, //\n        \"active\": PropTypes.bool, //\n        \"loading\": PropTypes.bool, //\n\n        // Handlers\n        \"onClick\": PropTypes.func, //\n        \"onBlur\": PropTypes.func\n    };\n\n    public render() {\n        const {variant, level, size, loading, block, active, ...props}: ButtonProps = this.props;\n\n        if (loading || props.disabled) {\n          props.tabIndex = -1;\n        }\n\n        if (props.disabled) {\n          props[\"aria-disabled\"] = \"true\";\n        }\n\n        props.className = this.classes(\n          \"Button\",\n          variant && \"Button--\" + variant,\n          size && \"Button--\" + size,\n          level && \"Button--\" + level,\n          block && \"Button--block\",\n          active && \"is-active\",\n          loading && \"is-loading\",\n          props.disabled && \"is-disabled\",\n          this.props.className);\n\n        return (props.href)\n          ? <a role=\"button\" {...props as React.AnchorHTMLAttributes<HTMLElement>} />\n          : <button {...props as React.ButtonHTMLAttributes<HTMLElement>} />;\n    }\n}\n"]}